// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Login Component matches the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    loginUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <h1
          className="form-title"
        >
          movie
          <img
            alt="movie roll"
            className="form-logo"
            src="./images/movie_roll.svg"
          />
          tracker
        </h1>,
        <h2
          className="login-title"
        >
          Login
        </h2>,
        <form
          className="login-form"
          onSubmit={[Function]}
        >
          <input
            className="email form-input false"
            name="email"
            onChange={[Function]}
            placeholder="email"
            type="text"
            value=""
          />
          <input
            className="password form-input false"
            name="password"
            onChange={[Function]}
            placeholder="password"
            type="password"
            value=""
          />
          <button>
            Login
          </button>
        </form>,
        <div
          className="new-account-container"
        >
          <h3
            className="incorrect-login false"
          >
            username or password is incorrect
          </h3>
          <h3>
            Don't have an account?
          </h3>
          <Link
            className="form-link"
            replace={false}
            to="/signup"
          >
            Create New Account
          </Link>
        </div>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            "movie",
            <img
              alt="movie roll"
              className="form-logo"
              src="./images/movie_roll.svg"
            />,
            "tracker",
          ],
          "className": "form-title",
        },
        "ref": null,
        "rendered": Array [
          "movie",
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "alt": "movie roll",
              "className": "form-logo",
              "src": "./images/movie_roll.svg",
            },
            "ref": null,
            "rendered": null,
            "type": "img",
          },
          "tracker",
        ],
        "type": "h1",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Login",
          "className": "login-title",
        },
        "ref": null,
        "rendered": "Login",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <input
              className="email form-input false"
              name="email"
              onChange={[Function]}
              placeholder="email"
              type="text"
              value=""
            />,
            <input
              className="password form-input false"
              name="password"
              onChange={[Function]}
              placeholder="password"
              type="password"
              value=""
            />,
            <button>
              Login
            </button>,
          ],
          "className": "login-form",
          "onSubmit": [Function],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "email form-input false",
              "name": "email",
              "onChange": [Function],
              "placeholder": "email",
              "type": "text",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "password form-input false",
              "name": "password",
              "onChange": [Function],
              "placeholder": "password",
              "type": "password",
              "value": "",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Login",
            },
            "ref": null,
            "rendered": "Login",
            "type": "button",
          },
        ],
        "type": "form",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h3
              className="incorrect-login false"
            >
              username or password is incorrect
            </h3>,
            <h3>
              Don't have an account?
            </h3>,
            <Link
              className="form-link"
              replace={false}
              to="/signup"
            >
              Create New Account
            </Link>,
          ],
          "className": "new-account-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "username or password is incorrect",
              "className": "incorrect-login false",
            },
            "ref": null,
            "rendered": "username or password is incorrect",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": "Don't have an account?",
            },
            "ref": null,
            "rendered": "Don't have an account?",
            "type": "h3",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": "Create New Account",
              "className": "form-link",
              "replace": false,
              "to": "/signup",
            },
            "ref": null,
            "rendered": "Create New Account",
            "type": [Function],
          },
        ],
        "type": "div",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <h1
            className="form-title"
          >
            movie
            <img
              alt="movie roll"
              className="form-logo"
              src="./images/movie_roll.svg"
            />
            tracker
          </h1>,
          <h2
            className="login-title"
          >
            Login
          </h2>,
          <form
            className="login-form"
            onSubmit={[Function]}
          >
            <input
              className="email form-input false"
              name="email"
              onChange={[Function]}
              placeholder="email"
              type="text"
              value=""
            />
            <input
              className="password form-input false"
              name="password"
              onChange={[Function]}
              placeholder="password"
              type="password"
              value=""
            />
            <button>
              Login
            </button>
          </form>,
          <div
            className="new-account-container"
          >
            <h3
              className="incorrect-login false"
            >
              username or password is incorrect
            </h3>
            <h3>
              Don't have an account?
            </h3>
            <Link
              className="form-link"
              replace={false}
              to="/signup"
            >
              Create New Account
            </Link>
          </div>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              "movie",
              <img
                alt="movie roll"
                className="form-logo"
                src="./images/movie_roll.svg"
              />,
              "tracker",
            ],
            "className": "form-title",
          },
          "ref": null,
          "rendered": Array [
            "movie",
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "alt": "movie roll",
                "className": "form-logo",
                "src": "./images/movie_roll.svg",
              },
              "ref": null,
              "rendered": null,
              "type": "img",
            },
            "tracker",
          ],
          "type": "h1",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Login",
            "className": "login-title",
          },
          "ref": null,
          "rendered": "Login",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <input
                className="email form-input false"
                name="email"
                onChange={[Function]}
                placeholder="email"
                type="text"
                value=""
              />,
              <input
                className="password form-input false"
                name="password"
                onChange={[Function]}
                placeholder="password"
                type="password"
                value=""
              />,
              <button>
                Login
              </button>,
            ],
            "className": "login-form",
            "onSubmit": [Function],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "email form-input false",
                "name": "email",
                "onChange": [Function],
                "placeholder": "email",
                "type": "text",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "className": "password form-input false",
                "name": "password",
                "onChange": [Function],
                "placeholder": "password",
                "type": "password",
                "value": "",
              },
              "ref": null,
              "rendered": null,
              "type": "input",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Login",
              },
              "ref": null,
              "rendered": "Login",
              "type": "button",
            },
          ],
          "type": "form",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h3
                className="incorrect-login false"
              >
                username or password is incorrect
              </h3>,
              <h3>
                Don't have an account?
              </h3>,
              <Link
                className="form-link"
                replace={false}
                to="/signup"
              >
                Create New Account
              </Link>,
            ],
            "className": "new-account-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "username or password is incorrect",
                "className": "incorrect-login false",
              },
              "ref": null,
              "rendered": "username or password is incorrect",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "Don't have an account?",
              },
              "ref": null,
              "rendered": "Don't have an account?",
              "type": "h3",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": "Create New Account",
                "className": "form-link",
                "replace": false,
                "to": "/signup",
              },
              "ref": null,
              "rendered": "Create New Account",
              "type": [Function],
            },
          ],
          "type": "div",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Login Component should match the snapshot when user is logged in 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Login
    loginUser={[MockFunction]}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "class",
    "props": Object {
      "push": false,
      "to": "/",
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "push": false,
        "to": "/",
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
