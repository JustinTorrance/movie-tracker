// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App App component Should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <App
    loadMovies={
      [MockFunction] {
        "calls": Array [
          Array [
            "https://api.themoviedb.org/3/movie/popular?api_key=da90047b6c1d3526d4b04666a1b64a0d&language=en-US&page=1&region=US",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    movies={Array []}
    user={
      Object {
        "email": "jake",
        "name": "jake",
        "password": "jake",
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <Switch>
        <Route
          exact={true}
          path="/"
          render={[Function]}
        />
        <Route
          component={[MockFunction]}
          path="/login"
        />
        <Route
          component={[MockFunction]}
          path="/signup"
        />
        <Route
          component={[MockFunction]}
          path="/favorites"
        />
      </Switch>,
      "className": "App",
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "class",
      "props": Object {
        "children": Array [
          <Route
            exact={true}
            path="/"
            render={[Function]}
          />,
          <Route
            component={[MockFunction]}
            path="/login"
          />,
          <Route
            component={[MockFunction]}
            path="/signup"
          />,
          <Route
            component={[MockFunction]}
            path="/favorites"
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "exact": true,
            "path": "/",
            "render": [Function],
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [MockFunction],
            "path": "/login",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [MockFunction],
            "path": "/signup",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "component": [MockFunction],
            "path": "/favorites",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": [Function],
    },
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <Switch>
          <Route
            exact={true}
            path="/"
            render={[Function]}
          />
          <Route
            component={[MockFunction]}
            path="/login"
          />
          <Route
            component={[MockFunction]}
            path="/signup"
          />
          <Route
            component={[MockFunction]}
            path="/favorites"
          />
        </Switch>,
        "className": "App",
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "class",
        "props": Object {
          "children": Array [
            <Route
              exact={true}
              path="/"
              render={[Function]}
            />,
            <Route
              component={[MockFunction]}
              path="/login"
            />,
            <Route
              component={[MockFunction]}
              path="/signup"
            />,
            <Route
              component={[MockFunction]}
              path="/favorites"
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "exact": true,
              "path": "/",
              "render": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [MockFunction],
              "path": "/login",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [MockFunction],
              "path": "/signup",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "component": [MockFunction],
              "path": "/favorites",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": [Function],
      },
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
