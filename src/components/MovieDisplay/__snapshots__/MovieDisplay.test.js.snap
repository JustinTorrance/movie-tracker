// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`MovieDisplay Should match the snapshot 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MovieDisplay
    isLoading={false}
    loadMovies={
      [MockFunction] {
        "calls": Array [
          Array [
            "https://api.themoviedb.org/3/movie/popular?api_key=da90047b6c1d3526d4b04666a1b64a0d&language=en-US&page=1&region=US",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    movies={
      Array [
        Object {
          "backdropPic": "https://image.tmdb.org/t/p/w500///",
          "genres": "drama",
          "id": 1,
          "overview": "great movie",
          "posterPic": "https://image.tmdb.org/t/p/w500///",
          "rating": 9,
          "runtime": 50,
          "title": "Titanic",
          "year": 1999,
        },
      ]
    }
    signOut={[MockFunction]}
    user={
      Object {
        "name": "jake",
      }
    }
    user_id={1}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <header
          className="movies-header"
        >
          <h1
            className="movie-tracker"
          >
            movie
            <img
              alt="movie roll"
              className="main-logo"
              src="./images/movie_roll.svg"
            />
            tracker
          </h1>
          <p
            className="user-greeting"
          >
            Hello, 
            jake
          </p>
          <Link
            replace={false}
            to="/login"
          >
            <button
              className="sign-out-btn"
              onClick={[MockFunction]}
            >
              sign out
            </button>
          </Link>
          <Link
            replace={false}
            to="/favorites"
          >
            <button
              className="toggle-favorites-btn"
              onClick={[Function]}
            >
              favorites
            </button>
          </Link>
        </header>,
        <h2
          className="movie-container-label"
        >
          Trending
        </h2>,
        <div
          className="movie-container-underline"
        />,
        <div
          className="movies-container"
        >
          <Connect(MovieCard)
            movie={
              Object {
                "backdropPic": "https://image.tmdb.org/t/p/w500///",
                "genres": "drama",
                "id": 1,
                "overview": "great movie",
                "posterPic": "https://image.tmdb.org/t/p/w500///",
                "rating": 9,
                "runtime": 50,
                "title": "Titanic",
                "year": 1999,
              }
            }
            reRender={[Function]}
          />
        </div>,
      ],
      "className": "movies-section-container",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <h1
              className="movie-tracker"
            >
              movie
              <img
                alt="movie roll"
                className="main-logo"
                src="./images/movie_roll.svg"
              />
              tracker
            </h1>,
            <p
              className="user-greeting"
            >
              Hello, 
              jake
            </p>,
            <Link
              replace={false}
              to="/login"
            >
              <button
                className="sign-out-btn"
                onClick={[MockFunction]}
              >
                sign out
              </button>
            </Link>,
            <Link
              replace={false}
              to="/favorites"
            >
              <button
                className="toggle-favorites-btn"
                onClick={[Function]}
              >
                favorites
              </button>
            </Link>,
          ],
          "className": "movies-header",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "movie",
                <img
                  alt="movie roll"
                  className="main-logo"
                  src="./images/movie_roll.svg"
                />,
                "tracker",
              ],
              "className": "movie-tracker",
            },
            "ref": null,
            "rendered": Array [
              "movie",
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "alt": "movie roll",
                  "className": "main-logo",
                  "src": "./images/movie_roll.svg",
                },
                "ref": null,
                "rendered": null,
                "type": "img",
              },
              "tracker",
            ],
            "type": "h1",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": Array [
                "Hello, ",
                "jake",
              ],
              "className": "user-greeting",
            },
            "ref": null,
            "rendered": Array [
              "Hello, ",
              "jake",
            ],
            "type": "p",
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="sign-out-btn"
                onClick={[MockFunction]}
              >
                sign out
              </button>,
              "replace": false,
              "to": "/login",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "sign out",
                "className": "sign-out-btn",
                "onClick": [MockFunction],
              },
              "ref": null,
              "rendered": "sign out",
              "type": "button",
            },
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "children": <button
                className="toggle-favorites-btn"
                onClick={[Function]}
              >
                favorites
              </button>,
              "replace": false,
              "to": "/favorites",
            },
            "ref": null,
            "rendered": Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": "favorites",
                "className": "toggle-favorites-btn",
                "onClick": [Function],
              },
              "ref": null,
              "rendered": "favorites",
              "type": "button",
            },
            "type": [Function],
          },
        ],
        "type": "header",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Trending",
          "className": "movie-container-label",
        },
        "ref": null,
        "rendered": "Trending",
        "type": "h2",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "className": "movie-container-underline",
        },
        "ref": null,
        "rendered": null,
        "type": "div",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            Array [
              <Connect(MovieCard)
                movie={
                  Object {
                    "backdropPic": "https://image.tmdb.org/t/p/w500///",
                    "genres": "drama",
                    "id": 1,
                    "overview": "great movie",
                    "posterPic": "https://image.tmdb.org/t/p/w500///",
                    "rating": 9,
                    "runtime": 50,
                    "title": "Titanic",
                    "year": 1999,
                  }
                }
                reRender={[Function]}
              />,
            ],
            false,
          ],
          "className": "movies-container",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "uid1",
            "nodeType": "class",
            "props": Object {
              "movie": Object {
                "backdropPic": "https://image.tmdb.org/t/p/w500///",
                "genres": "drama",
                "id": 1,
                "overview": "great movie",
                "posterPic": "https://image.tmdb.org/t/p/w500///",
                "rating": 9,
                "runtime": 50,
                "title": "Titanic",
                "year": 1999,
              },
              "reRender": [Function],
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          false,
        ],
        "type": "div",
      },
    ],
    "type": "section",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <header
            className="movies-header"
          >
            <h1
              className="movie-tracker"
            >
              movie
              <img
                alt="movie roll"
                className="main-logo"
                src="./images/movie_roll.svg"
              />
              tracker
            </h1>
            <p
              className="user-greeting"
            >
              Hello, 
              jake
            </p>
            <Link
              replace={false}
              to="/login"
            >
              <button
                className="sign-out-btn"
                onClick={[MockFunction]}
              >
                sign out
              </button>
            </Link>
            <Link
              replace={false}
              to="/favorites"
            >
              <button
                className="toggle-favorites-btn"
                onClick={[Function]}
              >
                favorites
              </button>
            </Link>
          </header>,
          <h2
            className="movie-container-label"
          >
            Trending
          </h2>,
          <div
            className="movie-container-underline"
          />,
          <div
            className="movies-container"
          >
            <Connect(MovieCard)
              movie={
                Object {
                  "backdropPic": "https://image.tmdb.org/t/p/w500///",
                  "genres": "drama",
                  "id": 1,
                  "overview": "great movie",
                  "posterPic": "https://image.tmdb.org/t/p/w500///",
                  "rating": 9,
                  "runtime": 50,
                  "title": "Titanic",
                  "year": 1999,
                }
              }
              reRender={[Function]}
            />
          </div>,
        ],
        "className": "movies-section-container",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              <h1
                className="movie-tracker"
              >
                movie
                <img
                  alt="movie roll"
                  className="main-logo"
                  src="./images/movie_roll.svg"
                />
                tracker
              </h1>,
              <p
                className="user-greeting"
              >
                Hello, 
                jake
              </p>,
              <Link
                replace={false}
                to="/login"
              >
                <button
                  className="sign-out-btn"
                  onClick={[MockFunction]}
                >
                  sign out
                </button>
              </Link>,
              <Link
                replace={false}
                to="/favorites"
              >
                <button
                  className="toggle-favorites-btn"
                  onClick={[Function]}
                >
                  favorites
                </button>
              </Link>,
            ],
            "className": "movies-header",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "movie",
                  <img
                    alt="movie roll"
                    className="main-logo"
                    src="./images/movie_roll.svg"
                  />,
                  "tracker",
                ],
                "className": "movie-tracker",
              },
              "ref": null,
              "rendered": Array [
                "movie",
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "alt": "movie roll",
                    "className": "main-logo",
                    "src": "./images/movie_roll.svg",
                  },
                  "ref": null,
                  "rendered": null,
                  "type": "img",
                },
                "tracker",
              ],
              "type": "h1",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": Array [
                  "Hello, ",
                  "jake",
                ],
                "className": "user-greeting",
              },
              "ref": null,
              "rendered": Array [
                "Hello, ",
                "jake",
              ],
              "type": "p",
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <button
                  className="sign-out-btn"
                  onClick={[MockFunction]}
                >
                  sign out
                </button>,
                "replace": false,
                "to": "/login",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "sign out",
                  "className": "sign-out-btn",
                  "onClick": [MockFunction],
                },
                "ref": null,
                "rendered": "sign out",
                "type": "button",
              },
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "class",
              "props": Object {
                "children": <button
                  className="toggle-favorites-btn"
                  onClick={[Function]}
                >
                  favorites
                </button>,
                "replace": false,
                "to": "/favorites",
              },
              "ref": null,
              "rendered": Object {
                "instance": null,
                "key": undefined,
                "nodeType": "host",
                "props": Object {
                  "children": "favorites",
                  "className": "toggle-favorites-btn",
                  "onClick": [Function],
                },
                "ref": null,
                "rendered": "favorites",
                "type": "button",
              },
              "type": [Function],
            },
          ],
          "type": "header",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Trending",
            "className": "movie-container-label",
          },
          "ref": null,
          "rendered": "Trending",
          "type": "h2",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "movie-container-underline",
          },
          "ref": null,
          "rendered": null,
          "type": "div",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": Array [
              Array [
                <Connect(MovieCard)
                  movie={
                    Object {
                      "backdropPic": "https://image.tmdb.org/t/p/w500///",
                      "genres": "drama",
                      "id": 1,
                      "overview": "great movie",
                      "posterPic": "https://image.tmdb.org/t/p/w500///",
                      "rating": 9,
                      "runtime": 50,
                      "title": "Titanic",
                      "year": 1999,
                    }
                  }
                  reRender={[Function]}
                />,
              ],
              false,
            ],
            "className": "movies-container",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "uid1",
              "nodeType": "class",
              "props": Object {
                "movie": Object {
                  "backdropPic": "https://image.tmdb.org/t/p/w500///",
                  "genres": "drama",
                  "id": 1,
                  "overview": "great movie",
                  "posterPic": "https://image.tmdb.org/t/p/w500///",
                  "rating": 9,
                  "runtime": 50,
                  "title": "Titanic",
                  "year": 1999,
                },
                "reRender": [Function],
              },
              "ref": null,
              "rendered": null,
              "type": [Function],
            },
            false,
          ],
          "type": "div",
        },
      ],
      "type": "section",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`MovieDisplay Should match the snapshot if isLoading is true 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <MovieDisplay
    isLoading={true}
    loadMovies={
      [MockFunction] {
        "calls": Array [
          Array [
            "https://api.themoviedb.org/3/movie/popular?api_key=da90047b6c1d3526d4b04666a1b64a0d&language=en-US&page=1&region=US",
          ],
          Array [
            "https://api.themoviedb.org/3/movie/popular?api_key=da90047b6c1d3526d4b04666a1b64a0d&language=en-US&page=1&region=US",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
    movies={
      Array [
        Object {
          "backdropPic": "https://image.tmdb.org/t/p/w500///",
          "genres": "drama",
          "id": 1,
          "overview": "great movie",
          "posterPic": "https://image.tmdb.org/t/p/w500///",
          "rating": 9,
          "runtime": 50,
          "title": "Titanic",
          "year": 1999,
        },
      ]
    }
    signOut={[MockFunction]}
    user={
      Object {
        "name": "jake",
      }
    }
    user_id={2}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {},
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {},
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
